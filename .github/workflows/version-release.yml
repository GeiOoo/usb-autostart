name: Version Release

on:
  push:
    branches: [ main ]
    paths:
      - 'package.json'

# Cancel any in-progress job or run
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  check-version-change:
    runs-on: windows-latest
    outputs:
      version_changed: ${{ steps.check-version.outputs.changed }}
      current_version: ${{ steps.current-version.outputs.current-version }}
      pr_number: ${{ steps.get-pr.outputs.pr_number }}
      run_id: ${{ steps.get-pr.outputs.run_id }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Get current version
        id: current-version
        run: |
          $version = node -p "require('./package.json').version"
          echo "current-version=$version" >> $env:GITHUB_OUTPUT
        shell: pwsh

      - name: Get previous version
        id: check-version
        run: |
          git checkout HEAD~1
          $previousVersion = node -p "require('./package.json').version"
          git checkout -
          $currentVersion = "${{ steps.current-version.outputs.current-version }}"
          $changed = $previousVersion -ne $currentVersion
          echo "changed=$changed" >> $env:GITHUB_OUTPUT
          echo "Previous version: $previousVersion"
          echo "Current version: $currentVersion"
          echo "Changed: $changed"
        shell: pwsh

      - name: Get PR and Build Info
        id: get-pr
        if: steps.check-version.outputs.changed == 'True'
        run: |
          # Get the PR number that was merged
          $pr = gh api "/repos/${{ github.repository }}/commits/${{ github.sha }}/pulls" | ConvertFrom-Json | Select-Object -First 1
          echo "pr_number=$($pr.number)" >> $env:GITHUB_OUTPUT
          
          # Get the build run ID from the PR
          $runs = gh api "/repos/${{ github.repository }}/actions/runs?event=pull_request&head_sha=${{ github.event.before }}" | ConvertFrom-Json
          $buildRun = $runs.workflow_runs | Where-Object { $_.name -eq "Build Application" } | Select-Object -First 1
          echo "run_id=$($buildRun.id)" >> $env:GITHUB_OUTPUT
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        shell: pwsh

  create-release:
    needs: check-version-change
    if: needs.check-version-change.outputs.version_changed == 'True'
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Check if tag exists
        id: check-tag
        run: |
          $tag="v${{ needs.check-version-change.outputs.current_version }}"
          $tagExists = git tag -l "$tag"
          echo "tag_exists=$($tagExists -ne $null)" >> $env:GITHUB_OUTPUT
        shell: pwsh

      - name: Download build artifacts
        if: steps.check-tag.outputs.tag_exists == 'false'
        uses: dawidd6/action-download-artifact@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          workflow: build.yml
          workflow_conclusion: success
          run_id: ${{ needs.check-version-change.outputs.run_id }}
          name: build-${{ needs.check-version-change.outputs.run_id }}
          path: artifacts

      - name: Create Release
        if: steps.check-tag.outputs.tag_exists == 'false'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          $version="v${{ needs.check-version-change.outputs.current_version }}"
          git tag $version
          git push origin $version
          
          # Move setup.exe and win-unpacked to release folder
          $setupFile = Get-ChildItem -Path "artifacts" -Recurse -Filter "*Setup*.exe" | Select-Object -First 1
          $portableDir = Get-ChildItem -Path "artifacts" -Recurse -Filter "win-unpacked" | Select-Object -First 1
          
          # Create release directory
          New-Item -ItemType Directory -Path "release" -Force
          
          # Copy setup.exe with proper name
          Copy-Item $setupFile.FullName -Destination "release/USB-AutoStart-Setup-${{ needs.check-version-change.outputs.current_version }}.exe"
          
          # Create and copy portable zip
          Compress-Archive -Path "$($portableDir.FullName)\*" -DestinationPath "release/USB-AutoStart-Portable-${{ needs.check-version-change.outputs.current_version }}.zip"
          
          # Create release with the processed files
          gh release create $version release/* --title "Release $version" --generate-notes --notes "Built from PR #${{ needs.check-version-change.outputs.pr_number }}"
        shell: pwsh
